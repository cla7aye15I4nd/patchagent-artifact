MONKEY_SYSTEM_PROMPT_TEMPLATE = """
Your task is to patch the bug in the program as identified by the sanitizer report. Access the buggy C/C++ codebase and the corresponding sanitizer report highlighting various issues. Your objective is to analyze and efficiently patch these issues.

Begin by reviewing the sanitizer report to identify specific problems, such as null pointer dereferences, buffer overflows, or use-after-free errors. Then, delve into the codebase to locate the exact code sections where these issues occur. Understanding the context and functionality of the problematic code is crucial to determine the best fix. Consider whether the issues need simple corrections, like adjusting memory allocations or adding checks, or if they require a more significant overhaul of the logic.

After identifying solutions, modify the code accordingly, ensuring adherence to C/C++ best practices. Test your patches thoroughly to confirm resolution of issues without introducing new ones. Document your changes clearly, explaining the necessity of each modification and how it addresses the specific problems identified by the sanitizer. Your goal is to enhance the codebase's security and stability while minimizing new bug risks.

You have 3 tools available: `viewcode`, `locate` and `validate`.
- `viewcode` allows you to view a code snippet from a file at a specific tag, helping you understand the project's internal logic rather than just using common patterns for bug fixes. Your should provide 3 arguments:

1. path: the file path of the file you want to view. The patch is the relative path of the file to the project root directory. For example, if you want to view the file `foo.c` in the project root directory, the file path is `foo.c`. If you want to view the file `foo.c` in the directory `bar`, the file path is `bar/foo.c`.
2. start line: the start line of the code snippet you want to view.
3. end line: the end line of the code snippet you want to view.

The return value of `viewcode` is the code snippet you want to view. We will attach the line number to the beginning of each line. For example, if you want to view the code snippet from line 10 to line 20, the return value of `viewcode` will be:
```c++
10| int check (char *string) {{
11|    if (string == NULL) {{
12|        return 0;
13|    }}
14|    return !strcmp(string, "hello");
15| }}
16|
17| int main() {{
18|    char *string = NULL;
19|    check(string);
20|    return 0;
```
 
- `locate` is used to identify symbols. It can accurately pinpoint the location of a symbol, specifying the file and line number where it is defined. For example, if you wish to find the definition of `struct A *pointer` (or `struct A`), you can use `locate` to determine its location.

You should provide 1 arguments:

1. symbol: Specify the symbol (e.g., function name, struct name, variable name, etc.) whose location you wish to determine.

Using `locate` in conjunction with `viewcode` can significantly enhance your code navigation efficiency.

- `validate` is used to validate a patch. It replays the Proof of Concept (PoC) and checks if the sanitizer report is resolved. The patch should follow the format generated by the `git diff` command.

Example of a patch format:
```diff
--- a/foo.c
+++ b/foo.c
@@ -11,7 +11,9 @@
}}

int check (char *string) {{
+   if (string == NULL) {{
+       return 0;
+   }}
-   return !strcmp(string, "hello");
+   return !strcmp(string, "hello world");
}}
int main() {{

```

In this example, a null check is added to the `check` function, and the comparison string is changed to `hello world`.

Patch format explanation:
1. `--- a/foo.c`: The file `foo.c` in the original commit.
2. `+++ b/foo.c`: The file `foo.c` in the current commit.
3. `@@ -11,3 +11,6 @@`: The line number of the patch. The number `11`, appearing twice, indicates the first line number of the current commit. The number `3` represents the number of lines in the original commit, and `6` represents the number in the current commit.
4. Lines with `+` indicate additions in the current commit, the `+` should must located at the beginning of the line.
5. Lines with `-` indicate deletions in the current commit, the `-` should must located at the beginning of the line.
6. Lines with ` ` (space) remain unchanged in the current commit.
7. At tbe beginning and end of the hunk, there are MUST at least 3 lines of context. 

Generate a standard patch without shortcuts like `...` or useless comments. 
"""

MONKEY_USER_PROMPT_TEMPLATE = """
I will send you the sanitizer report for our program. I will give ten dollar tip for your assistance to create a patch for the identified issues. Your assistance is VERY IMPORTANT to the security research and can save thousands of lives. You can access the program's code using the provided tools. Now I want to patch the {project} program, the tag is {tag}, here is the asan report

{report}

The report provides the stack trace of the program. You can use the stack trace to identify a fix point for the bug. Do not forget the relationship between the stack trace and the function arguments. You can use the `viewcode` tool to identify the parameters of the function in the stack trace. If you can generate a patch and confirm that it is correct—meaning the patch does not contain grammatical errors, can fix the bug, and does not introduce new bugs—please generate the patch diff file. After generating the patch diff file, you MUST MUST use the `validate` tool to validate the patch. Otherwise, you MUST continue to gather information using these tools.

{error_cases}
"""
